"""Find antibiotic resistance genes in genome assemblies.

Run resfinder iterating over folders with assemblies.
This script works using assemblies genereated by Unicycler in the following tree
structure.

```
assemblies/
├── SW0001_n1603_R130/           # The script will use the isolate ID to make the
│   └── assembly.fasta           # output folder name.
└── SW0002/                      # The script trims everything after the isolate ID
    └── assembly.fasta           # to make the output folders' name.
```

The script will generate a new folder with resfinder results in each SWXXXX folder as
follows

```
assemblies/
├── SW0001_n1603_R130/
│   ├── assembly.fasta
│   └── SW0001_resfinder/               # Plasmidfinder generates more files. However,
│       └── ResFinder_results_tab.txt   # here we show only for simplicity.
└── SW0002/
    └── assembly.fasta
    └── SW0002_resfinder/
        └── ResFinder_results_tab.txt
```
"""

import pandas as pd
import subprocess

from msp_genomes.utils.get_cli import parse_command_line_input
from msp_genomes.find_resistances.compile_resfinder_results import (
    compile_resfinder_results_into_dataframe,
)
from msp_genomes.utils.miscellaneous import (
    get_assemblies_info,
    make_output_folders,
    rm_folder,
    compile_info_from_assemblies_into_dataframe,
)
import msp_genomes.utils.config as config

_cge_script_name = "resfinder"


def resfinder_runner(assemblies_info: dict) -> None:
    """Run resfinder using the assembly.fasta files generated by Unicycler."""
    # Make output folders to store resfinder results.
    make_output_folders(assemblies_info)
    # Run resfinder on each assembly.
    for value in assemblies_info.values():
        subprocess.run(
            [
                "python",
                "-m",
                "resfinder",
                "-o",
                value["output_folder"],
                "-s",
                value["species"],
                "-l",  # Minimum coverage length
                "0.6",  # 60% (0.6) is the default value in CGE
                "-t",  # Threshold for identity
                "0.9",  # 90% (0.9) is the default value in CGE
                "--acquired",
                "--point",
                "-ifa",
                value["assembly_path"],
                "--ignore_missing_species",
                "-db_res",  # Path to resfinder database
                config.RESFINDER_DB,
                "-db_disinf",  # Path to disinfectant database
                config.DISINFINDER_DB,
                "-db_point",  # Path to point mutations database
                config.POINTFINDER_DB,
            ]
        )


def find_resistances(cli: dict) -> None:
    """Find ARGs in assembly files provided by the command line input."""
    # Get information to run resfinder and compile results from cli.
    strains_info = get_assemblies_info(
        cli["input_folder"],
        cli["output_folder"],
        cli["compilation_output"],
        _cge_script_name,
    )

    # Run resfinder.
    resfinder_runner(strains_info)

    # Compile resfinder results.
    compiled_results = compile_resfinder_results_into_dataframe(
        strains_info=strains_info,
        extended_output=cli["extended_output"],
    )

    # Compile info from the assembly files into a DataFrame.
    df_assemblies = compile_info_from_assemblies_into_dataframe(cli["input_folder"])
    df_assemblies = df_assemblies.sort_values(
        by=["Isolate ID", "Run info", "Molecule size"], ascending=[True, True, False]
    )

    # Merge DataFrames.
    merged_df = pd.merge(
        df_assemblies,
        compiled_results,
        on=["Isolate ID", "Run info", "Molecule size"],
        how="left",
    )

    # Export DataFrame as Excel file.
    merged_df.to_excel(
        cli["compilation_output"] / config.OUTPUT_NAMES_COMPILATIONS["resfinder"],
        index=False,
    )

    print(merged_df)


if __name__ == "__main__":
    # Get command line input,
    cli = parse_command_line_input("find_resistances")
    # print(cli)

    # Find ARGs in assembly files.
    find_resistances(cli)
