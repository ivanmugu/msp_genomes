"""Find plasmids type in genome assemblies.

Run plasmidfinder iterating over folders with assemblies.
This script works using assemblies genereated by Unicycler in the following tree
structured.

```
assemblies/
├── SW0001_n1603_R130/           # The script will use the isolate ID to make the
│   └── assembly.fasta           # output folder name.
└── SW0002/                      # The script trims everything after the isolate ID
    └── assembly.fasta           # to make the output folders' name.
```

The script will generate a new folder with plasmidfinder results in each SWXXXX folder as
follows

```
assemblies/
├── SW0001_n1603_R130/
│   ├── assembly.fasta
│   └── SW0001_plasmidfinder/    # Plasmidfinder generates more files. However, here we
│       └── results_tab.tsv      # show only one for simplicity.
└── SW0002/
    └── assembly.fasta
    └── SW0002_plasmidfinder/
│       └── results_tab.tsv
```
"""

from argparse import ArgumentParser
from argparse import Namespace
from pathlib import Path
import pandas as pd

from msp_genomes.find_plasmids.plasmidfinder import plasmidfinder_runner
from msp_genomes.find_plasmids.compile_plasmidfinder_results import (
    compile_plasmidfinder_results_into_dataframe,
)
from msp_genomes.utils.get_cli import parse_command_line_input
from msp_genomes.utils.miscellaneous import (
    get_assemblies_info,
    make_output_folders,
    make_tmp_directory,
    compile_info_from_assemblies_into_dataframe,
)
import msp_genomes.utils.config as config

_cge_script_name = "plasmidfinder"

# = Arguments to run plasmidfinder ==========================================
TMP_DIR = config.TMP_DIR
METHOD_PATH = None
DB_PATH = config.PLASMIDFINDER_DB
DATABASES = None
MIN_COV = 0.6  # Default value on the webservice
THRESHOLD = 0.95  # Default value on the webservice
EXTENDED_OUTPUT = True
SPECIESINFO_JSON = None
QUIET = False
# ===========================================================================


def make_argparser_for_plasmidfinder(
    infile: Path = Path("."), outdir: Path = Path(".")
) -> Namespace:
    args = Namespace()
    args.infile = infile
    args.outdir = outdir
    args.tmp_dir = TMP_DIR
    args.method_path = METHOD_PATH
    args.db_path = DB_PATH
    args.databases = DATABASES
    args.min_cov = MIN_COV
    args.threshold = THRESHOLD
    args.extended_output = EXTENDED_OUTPUT
    args.speciesinfo_json = SPECIESINFO_JSON
    args.quiet = QUIET
    return args


def plasmidfinder_wrapper(assemblies_info: dict, args_plasmidfinder: Namespace) -> None:
    """Run plasmidfinfer using the assembly.fasta files generated by Unicycler."""
    # Make output folders to store plasmidfinder results.
    make_output_folders(assemblies_info)
    # Run plasmidfinder on each assembly.
    for value in assemblies_info.values():
        # I have to convert assembly_path and output_folder to str because plasmidfinder
        # doesn't like Path. Also, the assembly_path should be given as list.
        args_plasmidfinder.infile = [str(value["assembly_path"])]
        args_plasmidfinder.outdir = str(value["output_folder"])
        plasmidfinder_runner(args_plasmidfinder)


def find_plasmids(cli: dict) -> None:
    """Find plasmid types in the asseblies provided by the cli"""
    # Create Namespace to run plasmidfinder.
    args = make_argparser_for_plasmidfinder()
    args.infile = cli["input_folder"]
    args.outdir = cli["output_folder"]

    # Get information to run plasmidfinder and compile the results.
    strains_info = get_assemblies_info(
        cli["input_folder"],
        cli["output_folder"],
        cli["compilation_output"],
        _cge_script_name,
    )

    # Make tmp directory
    make_tmp_directory()

    # Run plasmidfinder
    plasmidfinder_wrapper(strains_info, args)

    # Compile plasmidfinder results.
    compiled_results = compile_plasmidfinder_results_into_dataframe(
        strains_info,
        cli["extended_output"],
    )

    # Compile info from the assembly files into a DataFrame
    df_assemblies = compile_info_from_assemblies_into_dataframe(cli["input_folder"])
    df_assemblies = df_assemblies.sort_values(
        by=["Isolate ID", "Run info", "Molecule size"], ascending=[True, True, False]
    )

    merged_df = pd.merge(
        df_assemblies,
        compiled_results,
        on=["Isolate ID", "Run info", "Molecule size"],
        how="left",
    )
    print(merged_df)

    # Export DataFrame as Excel file.
    merged_df.to_excel(
        cli["compilation_output"] / config.OUTPUT_NAMES_COMPILATIONS["plasmidfinder"],
        index=False,
    )


if __name__ == "__main__":
    cli = parse_command_line_input("find_plasmids")
    print(cli)
    find_plasmids(cli)
    # print(misc.get_strain_info("SW4848", MSP_COLLECTIONS))
