import subprocess
from pathlib import Path
import tempfile

from msp_genomes.utils.miscellaneous import (
    get_assemblies_info,
    make_output_folders,
    rm_folder,
)

_cge_script_name = "mge_finder"


def mge_finder_runner(assemblies_info: dict) -> None:
    """Run mge_finder using the assembly.fasta files generated by Unicycler."""
    # Make output folders to store mge_finder results.
    make_output_folders(assemblies_info)
    # mge_finder uses tempfile to create a tmp folder to store variables. These variables
    # persist after running the program. Therefore, we have to delete the tmp folder
    # created by mge_finder to avoid errors.
    tmp_folder_path = Path(tempfile.gettempdir()) / "mge_finder"
    # Delete tmp folder in case it was created before
    rm_folder(tmp_folder_path)
    # Run mge_finder on each assembly.
    for value in assemblies_info.values():
        output_path = value["output_folder"] / "results"
        subprocess.run(
            [
                "mefinder",
                "find",
                "--contig",
                value["assembly_path"],
                output_path,
            ]
        )
        # Delete tmp folder.
        rm_folder(tmp_folder_path)


def find_mge(cli: dict) -> None:
    """Find MGEs in assembly files provided by the command line input."""
    # Get information to run mge_finder and compile results from cli.
    strains_info = get_assemblies_info(
        cli["input_folder"],
        cli["output_folder"],
        cli["compilation_output"],
        _cge_script_name,
    )

    # Run mge_finder
    mge_finder_runner(strains_info)


if __name__ == "__main__":
    pass
