"""Find virulence genes in genome assemblies.

Run virulencefinder iterating over folders with assemblies.
This script works using assemblies genereated by Unicycler in the following tree
structure.

```
assemblies/
├── SW0001_n1603_R130/           # The script will use the isolate ID to make the
│   └── assembly.fasta           # output folder name.
└── SW0002/                      # The script trims everything after the isolate ID
    └── assembly.fasta           # to make the output folders' name.
```

The script will generate a new folder with virulencefinder results in each SWXXXX folder
as follows

```
assemblies/
├── SW0001_n1603_R130/
│   ├── assembly.fasta
│   └── SW0001_virulencefinder/               # Plasmidfinder generates more files. However,
│       └── virulencefinder_results_tab.txt   # here we show only for simplicity.
└── SW0002/
    └── assembly.fasta
    └── SW0002_virulencefinder/
        └── virulencefinder_results_tab.txt
```"""

from pathlib import Path
import pandas as pd
from pandas import DataFrame
import subprocess
from typing import Optional

from msp_genomes.utils.get_cli import parse_command_line_input
from msp_genomes.utils.miscellaneous import (
    get_assemblies_info,
    make_output_folders,
    make_tmp_directory,
    rm_folder,
    clear_folder,
    compile_info_from_assemblies_into_dataframe,
)
import msp_genomes.utils.config as config

_script_name = "virulencefinder"
_output_virulencefinder_file = "results_tab.tsv"


def virulencefinder_runner(assemblies_info: dict) -> None:
    """Run virulencefinder using the assembly.fasta files generated by Unicycler."""
    # Make output folders to store resfinder results.
    make_output_folders(assemblies_info)
    # Run virulencefinder on each assembly.
    for value in assemblies_info.values():
        subprocess.run(
            [
                "python",
                "-m",
                "virulencefinder",
                "-ifa",
                value["assembly_path"],
                "-o",
                value["output_folder"],
                "-p",
                config.VIRULENCEFINDER_DB,
                "-x",
                "-tmp",
                config.TMP_DIR,
            ]
        )


def compile_virulencefinder_results_into_dataframe(
    strains_info: dict,
    extended_output: bool = True,
) -> DataFrame:
    """Compile virulencefinder results from folders inta a DataFrame."""
    results = {}  # To compile information
    counter = 0  # To use it as keys in results. It will help to make the DataFrame.
    # Iterate over virulencefinder results files to compile the information.
    for info in strains_info.values():
        # Check if output folder has virulence results.
        virulence_results_path = info["output_folder"] / _output_virulencefinder_file
        # If not virulence results path, continue
        if not (virulence_results_path.exists()):
            continue
        # Get virulence genes.
        virulence_results = extract_virulencefinder_results_by_molecule_size(
            virulence_results_path
        )
        # If there are not virulence genes, remove output folder and continue
        if not virulence_results:
            rm_folder(info["output_folder"])
            continue
        # Iterate over the virulence_results dictionary.
        # key is molecule size and value is an string with all the virulence genes
        # associated with the molecule.
        for key, value in virulence_results.items():
            results[counter] = {
                "Isolate ID": info["strain"],
                "Run info": info["run_info"],
                "Molecule size": key,
                "Virulence": value,
            }
            counter += 1
        # If not extended output
        if not extended_output:
            rm_folder(info["output_folder"])

    # Convert results into a DataFrame
    results = pd.DataFrame.from_dict(results, orient="index")

    return results


def extract_virulencefinder_results_by_molecule_size(
    virulencefinder_results_file_path: Path,
) -> Optional[dict]:
    # Convert `results_tab.tsv` into DataFrame
    results_df = pd.read_csv(virulencefinder_results_file_path, sep="\t")
    # If results_df is empty, i. e. no results found, return None
    if results_df.empty:
        return None
    # Initiate dictionary to store the results.
    extraction = {}
    # Iterate over DataFrame rows to get ARGs
    for _, row in results_df.iterrows():
        gene = row["Virulence factor"]
        contig = row["Contig"]
        # Get molecule length.
        molecule = int(contig.split(" ")[1].split("=")[1])
        # If results doesn't have any molecule record, start it.
        if not extraction.get(molecule):
            extraction[molecule] = gene
        # If results has a molecule record with the same gene, continue.
        elif gene in extraction[molecule]:
            continue
        # If results has a molecule record, but not a gene, append gene
        else:
            extraction[molecule] += f",{gene}"

    return extraction


def find_virulence(cli: dict):
    # Get information to run virulencefinder and compile results from cli.
    strains_info = get_assemblies_info(
        cli["input_folder"],
        cli["output_folder"],
        cli["compilation_output"],
        _script_name,
    )

    # Make tmp folder
    make_tmp_directory

    # Run virulencefinder.
    virulencefinder_runner(strains_info)

    # Clear tmp folder
    clear_folder(config.TMP_DIR)

    # Compile virulencefinder results into a DataFrame.
    compiled_results = compile_virulencefinder_results_into_dataframe(
        strains_info,
        cli["extended_output"],
    )
    print(compiled_results)

    # Compile info from the assembly files into a DataFrame.
    df_assemblies = compile_info_from_assemblies_into_dataframe(cli["input_folder"])
    df_assemblies = df_assemblies.sort_values(
        by=["Isolate ID", "Run info", "Molecule size"], ascending=[True, True, False]
    )
    # print(df_assemblies)

    # Merge DataFrames.
    merged_df = pd.merge(
        df_assemblies,
        compiled_results,
        on=["Isolate ID", "Run info", "Molecule size"],
        how="left",
    )
    # print(merged_df)

    # Export DataFrame as Excel file.
    merged_df.to_excel(
        cli["compilation_output"] / config.OUTPUT_NAMES_COMPILATIONS["virulencefinder"],
        index=False,
    )
    print(merged_df)


if __name__ == "__main__":
    # Get command line input.
    cli = parse_command_line_input("find_virulence")
    find_virulence(cli)
